import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Create{{ModuleName}}Dto } from './dto/create-{{moduleName}}.dto';
import { Update{{ModuleName}}Dto } from './dto/update-{{moduleName}}.dto';
import { {{ModuleName}}, {{ModuleName}}Document } from './schema/{{moduleName}}.schema';

@Injectable()
export class {{ModuleName}}Service {
  constructor(
    @InjectModel({{ModuleName}}.name) 
    private readonly {{camelModuleName}}Model: Model<{{ModuleName}}Document>,
  ) {}
  
  async create(create{{ModuleName}}Dto: Create{{ModuleName}}Dto): Promise<{{ModuleName}}> {
    try {
      const created{{ModuleName}} = new this.{{camelModuleName}}Model(create{{ModuleName}}Dto);
      return await created{{ModuleName}}.save();
    } catch (error) {
      throw new BadRequestException(`Failed to create {{moduleName}}: ${error.message}`);
    }
  }
  
  async findAll(): Promise<{{ModuleName}}[]> {
    return this.{{camelModuleName}}Model.find().lean().exec();
  }


  async findOne(id: string): Promise<{{ModuleName}}> {
    if (!id.match(/^[0-9a-fA-F]{24}$/)) {
      throw new BadRequestException('Invalid ID format');
    }

    const {{camelModuleName}} = await this.{{camelModuleName}}Model.findById(id).exec();
    if (!{{camelModuleName}}) {
      throw new NotFoundException(`{{ModuleName}} with ID ${id} not found`);
    }
    return {{camelModuleName}};
  }

  async findByName(name: string): Promise<{{ModuleName}}[]> {
    return this.{{camelModuleName}}Model
      .find({ name: { $regex: name, $options: 'i' } })
      .exec();
  }

  async update(id: string, update{{ModuleName}}Dto: Update{{ModuleName}}Dto): Promise<{{ModuleName}}> {
    if (!id.match(/^[0-9a-fA-F]{24}$/)) {
      throw new BadRequestException('Invalid ID format');
    }

    const updated{{ModuleName}} = await this.{{camelModuleName}}Model
      .findByIdAndUpdate(id, update{{ModuleName}}Dto, {
        new: true,
        runValidators: true,
      })
      .exec();

    if (!updated{{ModuleName}}) {
      throw new NotFoundException(`{{ModuleName}} with ID ${id} not found`);
    }

    return updated{{ModuleName}};
  }

  async remove(id: string): Promise<{ message: string; deletedId: string }> {
    if (!id.match(/^[0-9a-fA-F]{24}$/)) {
      throw new BadRequestException('Invalid ID format');
    }

    const deleted{{ModuleName}} = await this.{{camelModuleName}}Model
      .findByIdAndDelete(id)
      .exec();

    if (!deleted{{ModuleName}}) {
      throw new NotFoundException(`{{ModuleName}} with ID ${id} not found`);
    }

    return {
      message: `{{ModuleName}} with ID ${id} has been successfully deleted`,
      deletedId: id,
    };
  }

  async removeMany(ids: string[]): Promise<{ message: string; deletedCount: number }> {
    const validIds = ids.filter(id => id.match(/^[0-9a-fA-F]{24}$/));
    
    if (validIds.length !== ids.length) {
      throw new BadRequestException('Some IDs have invalid format');
    }

    const result = await this.{{camelModuleName}}Model
      .deleteMany({ _id: { $in: validIds } })
      .exec();

    return {
      message: `Successfully deleted ${result.deletedCount} {{moduleName}}(s)`,
      deletedCount: result.deletedCount,
    };
  }

  async count(search?: string): Promise<number> {
    let query = {};
    if (search) {
      query = {
        $or: [
          { name: { $regex: search, $options: 'i' } },
          { description: { $regex: search, $options: 'i' } },
        ],
      };
    }
    return this.{{camelModuleName}}Model.countDocuments(query).exec();
  }

  async exists(id: string): Promise<boolean> {
    if (!id.match(/^[0-9a-fA-F]{24}$/)) {
      return false;
    }
    const count = await this.{{camelModuleName}}Model.countDocuments({ _id: id }).exec();
    return count > 0;
  }
}